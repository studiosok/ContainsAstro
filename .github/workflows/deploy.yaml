name: Deploy to ECS on Fargate
on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ROLE: ${{ secrets.AWS_PREFIX }}:role/github_actions
  ECS_SERVICE: fargate-contains-service-byiphzxf
  ECS_CLUSTER: contains-cluster
  ECS_TASK_DEF: ${{ secrets.AWS_TASK_DEF_PREFIX }}:task-definition/fargate-contains:1
  CONTAINER_NAME: fargate-contains-app
  ECR_REPO: contains_astro

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Configure AWS Creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE }}
          role-session-name: github-ecr
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, push
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$ECR_REPO:$IMAGE_TAG .
          docker push $REGISTRY/$ECR_REPO:$IMAGE_TAG
          echo "image=$REGISTRY/$ECR_REPO:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
      - name: Image ID to ECS Task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
          task-definition-arn: ${{ env.ECS_TASK_DEF }}
          
      - name: Deploy ECS Task Def
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          task-definition: ${{ steps.task-def.outputs.task-definition }}
